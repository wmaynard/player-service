# Default values for chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
replicaCount: 1
strategyType:
# `serviceAccountName` is deprecated in favor of `serviceAccount.name`
serviceAccountName:
image:
  repository: gitlab.cdrentertainment.com:5050/platform-services/player-service
  tag: stable
  pullPolicy: IfNotPresent
  # secrets:
  #   - name: gitlab-registry
extraLabels: {}
lifecycle: {}
# preStop:
#   exec:
#     command: ["/bin/sh", "-c", "sleep 10"]
podAnnotations: 
  linkerd.io/inject: enabled
nodeSelector: {}
affinity: {}
tolerations: []
application:
  track: stable
  tier: web
  migrateCommand:
  initializeCommand:
  secretName: 
  secretChecksum:
hpa:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  CPUUtilizationPercentage: 60
  MemUtilizationPercentage: 60
gitlab:
  app:
  env:
  envName:
  envURL:
  projectID:
service:
  enabled: true
  annotations: {}
  name: ps-dev # 15 character limit..
  type: NodePort
  url: https://dev.nonprod.tower.cdrentertainment.com/
  additionalHosts:
  commonName: dev.nonprod.tower.cdrentertainment.com
  externalPort: 80
  internalPort: 8080
ingress:
  enabled: true
  paths: 
    - "/player"
    - "/admin/player"
    - "/item"
    - "/admin/item"
  tls:
    enabled: true
    acme: true
    secretName: "player-service-dev"
    useDefaultSecret: false
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/service-upstream: "true"
  modSecurity:
    enabled: true
    secRuleEngine: "On"
    # secRules:
    #   - variable: ""
    #     operator: ""
    #     action: ""
  canary:
    weight:
prometheus:
  metrics: true
livenessProbe:
  path: "/health"
  initialDelaySeconds: 15
  timeoutSeconds: 15
  scheme: "HTTP"
  probeType: "httpGet"
readinessProbe:
  path: "/health"
  initialDelaySeconds: 5
  timeoutSeconds: 3
  scheme: "HTTP"
  probeType: "httpGet"
startupProbe:
  path: "/health"
  failureThreshold: 30
  timeoutSeconds: 10
  scheme: "HTTP"
  probeType: "httpGet"
postgresql:
  managed: false
  managedClassSelector:
    #   matchLabels:
    #     stack: gitlab (This is an example. The labels should match the labels on the CloudSQLInstanceClass)

resources:
  limits:
    cpu: 512m
    memory: 1024Mi
  requests:
    cpu: 256m
    memory: 600Mi

## Configure PodDisruptionBudget
## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
#
podDisruptionBudget:
  enabled: false
  # minAvailable: 1
  maxUnavailable: 1

## Configure NetworkPolicy
## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
#
networkPolicy:
  enabled: false
  spec:
    podSelector:
      matchLabels: {}
    ingress:
    - from:
      - podSelector:
          matchLabels: {}
      - namespaceSelector:
          matchLabels:
            app.gitlab.com/managed_by: gitlab

ciliumNetworkPolicy:
  enabled: false
  alerts:
    enabled: false
  spec:
    endpointSelector: {}
    ingress:
    - fromEndpoints:
      - matchLabels:
          app.gitlab.com/managed_by: gitlab

serviceAccount:
  name:
  annotations: {}
  createNew: false

workers: {}
  # worker:
  #   replicaCount: 1
  #   terminationGracePeriodSeconds: 60
  #   command:
  #   - /bin/herokuish
  #   - procfile
  #   - start
  #   - worker
  #   nodeSelector: {}
  #   tolerations: []
  #   livenessProbe:
  #     path: "/"
  #     initialDelaySeconds: 15
  #     timeoutSeconds: 15
  #     scheme: "HTTP"
  #     probeType: "httpGet"
  #   readinessProbe:
  #     path: "/"
  #     initialDelaySeconds: 5
  #     timeoutSeconds: 3
  #     scheme: "HTTP"
  #     probeType: "httpGet"
  #   lifecycle:
  #     preStop:
  #       exec:
  #         command: ["/bin/sh", "-c", "sleep 10"]
  #   preStopCommand:
  #   - /bin/herokuish
  #   - procfile
  #   - start
  #   - stop_worker
